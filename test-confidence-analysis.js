const axios = require('axios');

async function testConfidenceAnalysis() {
  console.log('üîç ANALISANDO DADOS DE CONFIAN√áA DAS PREDI√á√ïES\n');

  try {
    // Testar predi√ß√µes de hoje
    console.log('üìä Obtendo predi√ß√µes de hoje...');
    const predictionsResponse = await axios.get('http://localhost:3001/api/predictions/today');
    
    if (!predictionsResponse.data.success || !predictionsResponse.data.data) {
      console.log('‚ùå Nenhuma predi√ß√£o encontrada');
      return;
    }

    const predictions = predictionsResponse.data.data;
    console.log(`‚úÖ Encontradas ${predictions.length} predi√ß√µes\n`);

    // Analisar cada predi√ß√£o
    let confidenceStats = { alta: 0, m√©dia: 0, baixa: 0 };
    let percentStats = { home: [], away: [], draw: [] };
    let formStats = { home: [], away: [] };
    let totalStats = { home: [], away: [] };

    predictions.forEach((pred, index) => {
      console.log(`\n--- PREDI√á√ÉO ${index + 1} ---`);
      
      const fixture = pred.fixture;
      const prediction = pred.prediction;
      const confidence = pred.confidence;
      
      console.log(`Jogo: ${fixture.teams?.home?.name || 'N/A'} vs ${fixture.teams?.away?.name || 'N/A'}`);
      console.log(`Confian√ßa: ${confidence}`);
      
      // Contar confian√ßas
      confidenceStats[confidence]++;
      
      // Analisar porcentagens
      if (prediction?.predictions?.percent) {
        const percent = prediction.predictions.percent;
        console.log(`Porcentagens: Casa ${percent.home}%, Empate ${percent.draw}%, Fora ${percent.away}%`);
        
        percentStats.home.push(parseInt(percent.home) || 0);
        percentStats.away.push(parseInt(percent.away) || 0);
        percentStats.draw.push(parseInt(percent.draw) || 0);
      }
      
      // Analisar compara√ß√£o
      if (prediction?.predictions?.comparison) {
        const comparison = prediction.predictions.comparison;
        console.log(`Compara√ß√£o: Forma Casa ${comparison.form?.home || 'N/A'}, Fora ${comparison.form?.away || 'N/A'}`);
        console.log(`Total: Casa ${comparison.total?.home || 'N/A'}, Fora ${comparison.total?.away || 'N/A'}`);
        
        formStats.home.push(parseInt(comparison.form?.home) || 0);
        formStats.away.push(parseInt(comparison.form?.away) || 0);
        totalStats.home.push(parseFloat(comparison.total?.home) || 0);
        totalStats.away.push(parseFloat(comparison.total?.away) || 0);
      }
      
      // Analisar H2H se dispon√≠vel
      if (pred.h2h && !pred.h2h.error) {
        console.log(`H2H Confian√ßa: ${pred.h2h.confidence}`);
        console.log(`H2H Insights: ${pred.h2h.insights?.join(', ') || 'N/A'}`);
      }
    });

    // Estat√≠sticas gerais
    console.log('\nüìà ESTAT√çSTICAS GERAIS');
    console.log('========================');
    console.log(`Confian√ßa Alta: ${confidenceStats.alta} (${((confidenceStats.alta/predictions.length)*100).toFixed(1)}%)`);
    console.log(`Confian√ßa M√©dia: ${confidenceStats.m√©dia} (${((confidenceStats.m√©dia/predictions.length)*100).toFixed(1)}%)`);
    console.log(`Confian√ßa Baixa: ${confidenceStats.baixa} (${((confidenceStats.baixa/predictions.length)*100).toFixed(1)}%)`);
    
    if (percentStats.home.length > 0) {
      const avgHome = percentStats.home.reduce((a, b) => a + b, 0) / percentStats.home.length;
      const avgAway = percentStats.away.reduce((a, b) => a + b, 0) / percentStats.away.length;
      const avgDraw = percentStats.draw.reduce((a, b) => a + b, 0) / percentStats.draw.length;
      
      console.log('\nüìä M√âDIAS DE PORCENTAGEM');
      console.log(`Casa: ${avgHome.toFixed(1)}%`);
      console.log(`Empate: ${avgDraw.toFixed(1)}%`);
      console.log(`Fora: ${avgAway.toFixed(1)}%`);
      
      // An√°lise de distribui√ß√£o
      const highConfidence = percentStats.home.filter(p => p >= 70).length + percentStats.away.filter(p => p >= 70).length;
      const mediumConfidence = percentStats.home.filter(p => p >= 60 && p < 70).length + percentStats.away.filter(p => p >= 60 && p < 70).length;
      
      console.log(`\nüéØ AN√ÅLISE DE DISTRIBUI√á√ÉO`);
      console.log(`Porcentagens >= 70%: ${highConfidence}`);
      console.log(`Porcentagens 60-69%: ${mediumConfidence}`);
    }

    // Sugest√µes de melhoria
    console.log('\nüí° SUGEST√ïES DE MELHORIA');
    console.log('==========================');
    
    if (confidenceStats.baixa > confidenceStats.alta + confidenceStats.m√©dia) {
      console.log('‚ùå PROBLEMA: Muitas predi√ß√µes com confian√ßa baixa');
      console.log('üîß SOLU√á√ïES:');
      console.log('   1. Reduzir threshold de porcentagem para confian√ßa m√©dia (de 60% para 55%)');
      console.log('   2. Considerar diferen√ßa de forma como fator de confian√ßa');
      console.log('   3. Melhorar an√°lise H2H para aumentar confian√ßa');
      console.log('   4. Adicionar an√°lise de les√µes e escala√ß√µes');
    }

  } catch (error) {
    console.error('‚ùå Erro ao analisar predi√ß√µes:', error.message);
  }
}

testConfidenceAnalysis();
