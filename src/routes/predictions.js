const express = require('express');
const router = express.Router();
const predictionsService = require('../services/predictionsService');
const axios = require('axios');
const cacheService = require('../services/cacheService');

// Fun√ß√£o auxiliar para formatar predi√ß√µes no formato esperado pelo frontend
const formatPredictionsForFrontend = (predictions) => {
  console.log('üîç Debug formatPredictionsForFrontend:');
  console.log('   Tipo de predictions:', typeof predictions);
  console.log('   √â array:', Array.isArray(predictions));
  console.log('   √â objeto:', typeof predictions === 'object' && predictions !== null);
  console.log('   Keys:', Object.keys(predictions));
  
  if (Object.keys(predictions).length > 0) {
    const firstKey = Object.keys(predictions)[0];
    const firstPrediction = predictions[firstKey];
    console.log('   Primeira chave:', firstKey);
    console.log('   Tipo da primeira chave:', typeof firstKey);
    console.log('   Primeira predi√ß√£o success:', firstPrediction?.success);
    console.log('   Primeira predi√ß√£o data keys:', Object.keys(firstPrediction?.data || {}));
    console.log('   Fixture ID no data:', firstPrediction?.data?.fixture?.fixture?.id);
    console.log('   Tipo do Fixture ID no data:', typeof firstPrediction?.data?.fixture?.fixture?.id);
  }
  
  return Object.entries(predictions)
    .filter(([fixtureId, prediction]) => prediction.success && prediction.data)
    .map(([fixtureId, prediction]) => {
      const { data } = prediction;
      
      console.log(`üîç Processando fixture ${fixtureId}:`);
      console.log('   Data keys:', Object.keys(data));
      console.log('   Data fixture:', data.fixture);
      
      // O fixtureId j√° √© um n√∫mero (vem do getMultipleFixturePredictions)
      const numericFixtureId = Number(fixtureId);
      
      // Se n√£o h√° fixture ID v√°lido, pular esta predi√ß√£o
      if (!numericFixtureId || isNaN(numericFixtureId)) {
        console.warn('‚ö†Ô∏è Predi√ß√£o sem fixture ID v√°lido:', fixtureId, data);
        return null;
      }
      
      return {
        fixture: {
          fixture: {
            id: numericFixtureId, // Usar o ID num√©rico real da API
            date: data.fixture?.fixture?.date || new Date().toISOString(),
            status: data.fixture?.fixture?.status || 'NS'
          },
          teams: data.teams || {
            home: { name: 'Time Casa', id: 1 },
            away: { name: 'Time Visitante', id: 2 }
          },
          league: data.league || {
            name: 'Liga',
            id: 1,
            country: 'Pa√≠s'
          }
        },
        prediction: data.predictions || {},
        confidence: data.analysis?.confidence || 'M√©dia',
        riskLevel: data.analysis?.riskLevel || 'M√©dio',
        recommendation: data.analysis?.recommendedBets?.[0] || null,
        analysis: data.analysis || {}, // üöÄ ADICIONADO: Incluir an√°lise completa
        // üöÄ ADICIONADO: Incluir dados necess√°rios para an√°lise avan√ßada
        comparison: data.comparison || {},
        teams: data.teams || {},
        predictions: data.predictions || {}
      };
    })
    .filter(prediction => prediction !== null); // Remover predi√ß√µes inv√°lidas
};

// ===== ROTAS ESPEC√çFICAS (DEVEM VIR ANTES DAS ROTAS GEN√âRICAS) =====

/**
 * @route   GET /api/predictions/health
 * @desc    Verifica a sa√∫de do servi√ßo de predi√ß√µes
 * @access  Public
 */
router.get('/health', (req, res) => {
  res.json({
    success: true,
    message: 'Servi√ßo de predi√ß√µes funcionando',
    timestamp: new Date().toISOString()
  });
});

/**
 * @route   GET /api/predictions/today
 * @desc    Obt√©m predi√ß√µes para jogos de hoje (compatibilidade)
 * @access  Public
 */
router.get('/today', async (req, res) => {
  try {
    const { refresh } = req.query;
    const forceRefresh = refresh === 'true';
    
    // Se for force refresh, limpar cache primeiro
    if (forceRefresh) {
      console.log('üîÑ Force refresh: limpando cache de predi√ß√µes de hoje');
      await cacheService.clearCacheByEndpoint('predictions');
    }
    
    // Verificar cache primeiro (se n√£o for force refresh)
    if (!forceRefresh) {
      const cachedData = await cacheService.getCache('predictions', { type: 'today' });
      if (cachedData) {
        console.log('üì¶ Retornando predi√ß√µes de hoje do cache');
        return res.json({
          success: true,
          data: cachedData,
          fromCache: true,
          timestamp: new Date().toISOString()
        });
      }
    }

    console.log('üîÆ Buscando predi√ß√µes de hoje da API');
    
    // Buscar fixtures de hoje
    const fixturesResponse = await axios.get(`${process.env.API_SPORTS_BASE_URL || 'https://v3.football.api-sports.io'}/fixtures`, {
      params: { 
        date: new Date().toISOString().split('T')[0],
        status: 'NS-LIVE-FT'
      },
      headers: {
        'x-rapidapi-host': 'v3.football.api-sports.io',
        'x-rapidapi-key': process.env.API_SPORTS_KEY
      }
    });

    if (!fixturesResponse.data.response || fixturesResponse.data.response.length === 0) {
      const emptyData = [];
      // Salvar no cache mesmo sendo vazio
      await cacheService.setCache('predictions', { type: 'today' }, emptyData);
      
      return res.json({
        success: true,
        data: emptyData,
        fromCache: false,
        timestamp: new Date().toISOString()
      });
    }

    // Buscar predi√ß√µes para as primeiras 5 fixtures
    const fixtureIds = fixturesResponse.data.response.slice(0, 5).map(f => f.fixture.id);
    console.log('üîç Fixture IDs obtidos:', fixtureIds);
    
    // Se for force refresh, limpar cache de cada fixture individualmente
    if (forceRefresh) {
      console.log('üîÑ Force refresh: limpando cache de cada fixture...');
      for (const fixtureId of fixtureIds) {
        await cacheService.deleteCache('predictions', { fixtureId });
      }
    }
    
    const predictions = await predictionsService.getMultipleFixturePredictions(fixtureIds);

    // Formatar dados no formato esperado pelo frontend
    console.log('üîç Antes de formatPredictionsForFrontend:');
    console.log('   Tipo de predictions:', typeof predictions);
    console.log('   Keys:', Object.keys(predictions));
    
    const formattedPredictions = formatPredictionsForFrontend(predictions);
    
    console.log('üîç Ap√≥s formatPredictionsForFrontend:');
    console.log('   N√∫mero de predi√ß√µes formatadas:', formattedPredictions.length);
    if (formattedPredictions.length > 0) {
      console.log('   Primeira predi√ß√£o ID:', formattedPredictions[0].fixture?.fixture?.id);
      console.log('   Tipo do ID:', typeof formattedPredictions[0].fixture?.fixture?.id);
    }

    // Salvar no cache por 1 hora
    await cacheService.setCache('predictions', { type: 'today' }, formattedPredictions);

    res.json({
      success: true,
      data: formattedPredictions,
      fromCache: false,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erro ao buscar predi√ß√µes de hoje:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erro ao buscar predi√ß√µes de hoje',
      details: error.message
    });
  }
});

/**
 * @route   GET /api/predictions/live
 * @desc    Obt√©m predi√ß√µes para jogos ao vivo (compatibilidade)
 * @access  Public
 */
router.get('/live', async (req, res) => {
  try {
    const { refresh } = req.query;
    const forceRefresh = refresh === 'true';
    
    // Se for force refresh, limpar cache primeiro
    if (forceRefresh) {
      console.log('üîÑ Force refresh: limpando cache de predi√ß√µes ao vivo');
      await cacheService.clearCacheByEndpoint('predictions');
    }
    
    // Verificar cache primeiro (se n√£o for force refresh)
    if (!forceRefresh) {
      const cachedData = await cacheService.getCache('predictions', { type: 'live' });
      if (cachedData) {
        console.log('üì¶ Retornando predi√ß√µes ao vivo do cache');
        return res.json({
          success: true,
          data: cachedData,
          fromCache: true,
          timestamp: new Date().toISOString()
        });
      }
    }

    console.log('üîÆ Buscando predi√ß√µes ao vivo da API');
    
    // Buscar fixtures ao vivo
    const fixturesResponse = await axios.get(`${process.env.API_SPORTS_BASE_URL || 'https://v3.football.api-sports.io'}/fixtures`, {
      params: { 
        status: 'LIVE'
      },
      headers: {
        'x-rapidapi-host': 'v3.football.api-sports.io',
        'x-rapidapi-key': process.env.API_SPORTS_KEY
      }
    });

    if (!fixturesResponse.data.response || fixturesResponse.data.response.length === 0) {
      const emptyData = [];
      // Salvar no cache mesmo sendo vazio (por 5 minutos para jogos ao vivo)
      await cacheService.setCache('predictions', { type: 'live' }, emptyData);
      
      return res.json({
        success: true,
        data: emptyData,
        fromCache: false,
        timestamp: new Date().toISOString()
      });
    }

    // Buscar predi√ß√µes para as primeiras 5 fixtures
    const fixtureIds = fixturesResponse.data.response.slice(0, 5).map(f => f.fixture.id);
    const predictions = await predictionsService.getMultipleFixturePredictions(fixtureIds);

    // Formatar dados no formato esperado pelo frontend
    const formattedPredictions = formatPredictionsForFrontend(predictions);

    // Salvar no cache por 5 minutos (jogos ao vivo mudam rapidamente)
    await cacheService.setCache('predictions', { type: 'live' }, formattedPredictions);

    res.json({
      success: true,
      data: formattedPredictions,
      fromCache: false,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erro ao buscar predi√ß√µes ao vivo:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erro ao buscar predi√ß√µes ao vivo',
      details: error.message
    });
  }
});

/**
 * @route   GET /api/predictions/finished
 * @desc    Obt√©m predi√ß√µes para jogos finalizados (compatibilidade)
 * @access  Public
 */
router.get('/finished', async (req, res) => {
  try {
    const { refresh } = req.query;
    const forceRefresh = refresh === 'true';
    
    // Se for force refresh, limpar cache primeiro
    if (forceRefresh) {
      console.log('üîÑ Force refresh: limpando cache de predi√ß√µes finalizadas');
      await cacheService.clearCacheByEndpoint('predictions');
    }
    
    // Verificar cache primeiro (se n√£o for force refresh)
    if (!forceRefresh) {
      const cachedData = await cacheService.getCache('predictions', { type: 'finished' });
      if (cachedData) {
        console.log('üì¶ Retornando predi√ß√µes finalizadas do cache');
        return res.json({
          success: true,
          data: cachedData,
          fromCache: true,
          timestamp: new Date().toISOString()
        });
      }
    }

    console.log('üîÆ Buscando predi√ß√µes finalizadas da API');
    
    // Buscar fixtures finalizadas de hoje
    const fixturesResponse = await axios.get(`${process.env.API_SPORTS_BASE_URL || 'https://v3.football.api-sports.io'}/fixtures`, {
      params: { 
        date: new Date().toISOString().split('T')[0],
        status: 'FT-AET-PEN'
      },
      headers: {
        'x-rapidapi-host': 'v3.football.api-sports.io',
        'x-rapidapi-key': process.env.API_SPORTS_KEY
      }
    });

    if (!fixturesResponse.data.response || fixturesResponse.data.response.length === 0) {
      const emptyData = [];
      // Salvar no cache mesmo sendo vazio
      await cacheService.setCache('predictions', { type: 'finished' }, emptyData);
      
      return res.json({
        success: true,
        data: emptyData,
        fromCache: false,
        timestamp: new Date().toISOString()
      });
    }

    // Buscar predi√ß√µes para as primeiras 5 fixtures
    const fixtureIds = fixturesResponse.data.response.slice(0, 5).map(f => f.fixture.id);
    const predictions = await predictionsService.getMultipleFixturePredictions(fixtureIds);

    // Formatar dados no formato esperado pelo frontend
    const formattedPredictions = formatPredictionsForFrontend(predictions);

    // Salvar no cache por 1 hora (jogos finalizados n√£o mudam)
    await cacheService.setCache('predictions', { type: 'finished' }, formattedPredictions);

    res.json({
      success: true,
      data: formattedPredictions,
      fromCache: false,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erro ao buscar predi√ß√µes finalizadas:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erro ao buscar predi√ß√µes finalizadas',
      details: error.message
    });
  }
});

/**
 * üöÄ NOVA: @route   GET /api/predictions/advanced/:fixtureId
 * @desc    Obt√©m an√°lise avan√ßada completa de uma fixture
 * @access  Public
 */
router.get('/advanced/:fixtureId', async (req, res) => {
  try {
    const { fixtureId } = req.params;
    const { refresh } = req.query;
    
    if (!fixtureId) {
      return res.status(400).json({
        success: false,
        error: 'ID da fixture √© obrigat√≥rio'
      });
    }

    console.log(`üîç Iniciando an√°lise avan√ßada para fixture ${fixtureId}`);

    const forceRefresh = refresh === 'true';
    const result = await predictionsService.getAdvancedFixtureAnalysis(parseInt(fixtureId), forceRefresh);

    if (!result.success) {
      return res.status(404).json(result);
    }

    res.json(result);

  } catch (error) {
    console.error('‚ùå Erro ao buscar an√°lise avan√ßada:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor',
      details: error.message
    });
  }
});

// ===== ROTAS GEN√âRICAS (DEVEM VIR DEPOIS DAS ROTAS ESPEC√çFICAS) =====

/**
 * @route   GET /api/predictions/:fixtureId
 * @desc    Obt√©m predi√ß√µes para uma fixture espec√≠fica
 * @access  Public
 */
router.get('/:fixtureId', async (req, res) => {
  try {
    const { fixtureId } = req.params;
    const { refresh } = req.query;
    
    if (!fixtureId) {
      return res.status(400).json({
        success: false,
        error: 'ID da fixture √© obrigat√≥rio'
      });
    }

    const forceRefresh = refresh === 'true';
    const result = await predictionsService.getFixturePredictions(parseInt(fixtureId), forceRefresh);

    if (!result.success) {
      return res.status(404).json(result);
    }

    res.json(result);

  } catch (error) {
    console.error('‚ùå Erro ao buscar predi√ß√µes:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor',
      details: error.message
    });
  }
});

/**
 * @route   POST /api/predictions/refresh/:fixtureId
 * @desc    For√ßa atualiza√ß√£o das predi√ß√µes para uma fixture
 * @access  Public
 */
router.post('/refresh/:fixtureId', async (req, res) => {
  try {
    const { fixtureId } = req.params;
    
    if (!fixtureId) {
      return res.status(400).json({
        success: false,
        error: 'ID da fixture √© obrigat√≥rio'
      });
    }

    console.log(`üîÑ For√ßando atualiza√ß√£o das predi√ß√µes para fixture ${fixtureId}`);
    
    const result = await predictionsService.getFixturePredictions(parseInt(fixtureId), true);

    if (!result.success) {
      return res.status(404).json(result);
    }

    res.json(result);

  } catch (error) {
    console.error('‚ùå Erro ao atualizar predi√ß√µes:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor',
      details: error.message
    });
  }
});

/**
 * @route   POST /api/predictions/multiple
 * @desc    Obt√©m predi√ß√µes para m√∫ltiplas fixtures
 * @access  Public
 */
router.post('/multiple', async (req, res) => {
  try {
    const { fixtureIds } = req.body;
    
    if (!fixtureIds || !Array.isArray(fixtureIds) || fixtureIds.length === 0) {
      return res.status(400).json({
        success: false,
        error: 'Array de IDs das fixtures √© obrigat√≥rio'
      });
    }

    if (fixtureIds.length > 10) {
      return res.status(400).json({
        success: false,
        error: 'M√°ximo de 10 fixtures por requisi√ß√£o'
      });
    }

    console.log(`üîÆ Buscando predi√ß√µes para ${fixtureIds.length} fixtures`);
    
    const results = await predictionsService.getMultipleFixturePredictions(fixtureIds);

    res.json({
      success: true,
      data: results,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erro ao buscar predi√ß√µes m√∫ltiplas:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor',
      details: error.message
    });
  }
});

/**
 * @route   POST /api/predictions/clear-cache
 * @desc    Limpa todo o cache de predi√ß√µes
 * @access  Public
 */
router.post('/clear-cache', async (req, res) => {
  try {
    console.log('üóëÔ∏è Limpando cache de predi√ß√µes...');
    
    // Limpar cache de predi√ß√µes espec√≠fico
    await cacheService.clearCacheByEndpoint('predictions');
    
    res.json({
      success: true,
      message: 'Cache de predi√ß√µes limpo com sucesso',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erro ao limpar cache de predi√ß√µes:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erro ao limpar cache',
      details: error.message
    });
  }
});

/**
 * @route   DELETE /api/predictions/cache/:fixtureId
 * @desc    Limpa cache de predi√ß√µes para uma fixture
 * @access  Public
 */
router.delete('/cache/:fixtureId', async (req, res) => {
  try {
    const { fixtureId } = req.params;
    
    if (!fixtureId) {
      return res.status(400).json({
        success: false,
        error: 'ID da fixture √© obrigat√≥rio'
      });
    }

    const success = await predictionsService.clearPredictionCache(parseInt(fixtureId));

    if (success) {
      res.json({
        success: true,
        message: `Cache de predi√ß√µes limpo para fixture ${fixtureId}`,
        timestamp: new Date().toISOString()
      });
    } else {
      res.status(500).json({
        success: false,
        error: 'Erro ao limpar cache'
      });
    }

  } catch (error) {
    console.error('‚ùå Erro ao limpar cache de predi√ß√µes:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor',
      details: error.message
    });
  }
});

module.exports = router;
