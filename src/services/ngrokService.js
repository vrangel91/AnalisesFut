const ngrok = require('ngrok');
const config = require('../../ngrok.config');

class NgrokService {
  constructor() {
    this.tunnel = null;
    this.tunnelUrl = null;
    this.isRunning = false;
  }

  /**
   * Inicia o t√∫nel ngrok
   */
  async startTunnel() {
    try {
      if (this.isRunning) {
        console.log('üîÑ T√∫nel ngrok j√° est√° rodando');
        return this.tunnelUrl;
      }

      console.log('üöÄ Iniciando t√∫nel ngrok...');
      
      const ngrokConfig = {
        addr: config.server.port,
        region: config.ngrok.region,
        bindTls: config.ngrok.bindTls,
        log: config.ngrok.log,
        inspect: config.ngrok.inspect,
      };

      // Adicionar autentica√ß√£o se configurada
      if (process.env.NGROK_AUTH_TOKEN) {
        ngrokConfig.authtoken = process.env.NGROK_AUTH_TOKEN;
      }

      // Adicionar subdom√≠nio se configurado
      if (config.ngrok.subdomain) {
        ngrokConfig.subdomain = config.ngrok.subdomain;
      }

      this.tunnel = await ngrok.connect(ngrokConfig);
      this.tunnelUrl = this.tunnel;
      this.isRunning = true;

      console.log('‚úÖ T√∫nel ngrok iniciado com sucesso!');
      console.log(`üåê URL p√∫blica: ${this.tunnelUrl}`);
      console.log(`üì± Acesse de qualquer dispositivo: ${this.tunnelUrl}`);
      
      // Configurar eventos do t√∫nel (compat√≠vel com ngrok v5)
      try {
        if (ngrok.getNgrokProcess) {
          ngrok.getNgrokProcess().on('exit', () => {
            console.log('‚ö†Ô∏è  Processo ngrok foi encerrado');
            this.isRunning = false;
            this.tunnel = null;
            this.tunnelUrl = null;
          });
        }
      } catch (error) {
        console.log('‚ÑπÔ∏è  Eventos do processo ngrok n√£o dispon√≠veis nesta vers√£o');
      }

      return this.tunnelUrl;
    } catch (error) {
      console.error('‚ùå Erro ao iniciar t√∫nel ngrok:', error.message);
      throw error;
    }
  }

  /**
   * Para o t√∫nel ngrok
   */
  async stopTunnel() {
    try {
      if (!this.isRunning) {
        console.log('‚ö†Ô∏è  T√∫nel ngrok n√£o est√° rodando');
        return;
      }

      console.log('üõë Parando t√∫nel ngrok...');
      await ngrok.kill();
      
      this.tunnel = null;
      this.tunnelUrl = null;
      this.isRunning = false;
      
      console.log('‚úÖ T√∫nel ngrok parado com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao parar t√∫nel ngrok:', error.message);
      throw error;
    }
  }

  /**
   * Obt√©m informa√ß√µes do t√∫nel atual
   */
  getTunnelInfo() {
    return {
      isRunning: this.isRunning,
      tunnelUrl: this.tunnelUrl,
      localPort: config.server.port,
      region: config.ngrok.region,
    };
  }

  /**
   * Obt√©m estat√≠sticas do t√∫nel (se dispon√≠vel)
   */
  async getTunnelStats() {
    try {
      if (!this.isRunning) {
        return null;
      }

      // Compat√≠vel com ngrok v5
      try {
        if (ngrok.getApi) {
          const api = ngrok.getApi();
          const tunnels = await api.listTunnels();
          
          if (tunnels.tunnels && tunnels.tunnels.length > 0) {
            const tunnel = tunnels.tunnels.find(t => t.public_url === this.tunnelUrl);
            return tunnel || null;
          }
        }
      } catch (apiError) {
        console.log('‚ÑπÔ∏è  API de estat√≠sticas n√£o dispon√≠vel nesta vers√£o do ngrok');
      }
      
      return null;
    } catch (error) {
      console.error('‚ùå Erro ao obter estat√≠sticas do t√∫nel:', error.message);
      return null;
    }
  }

  /**
   * Reinicia o t√∫nel ngrok
   */
  async restartTunnel() {
    try {
      console.log('üîÑ Reiniciando t√∫nel ngrok...');
      await this.stopTunnel();
      await new Promise(resolve => setTimeout(resolve, 1000)); // Aguarda 1 segundo
      return await this.startTunnel();
    } catch (error) {
      console.error('‚ùå Erro ao reiniciar t√∫nel ngrok:', error.message);
      throw error;
    }
  }

  /**
   * Verifica se o t√∫nel est√° funcionando
   */
  async healthCheck() {
    try {
      if (!this.isRunning || !this.tunnelUrl) {
        return false;
      }

      // Tenta fazer uma requisi√ß√£o para o t√∫nel
      const response = await fetch(`${this.tunnelUrl}/api/health`);
      return response.ok;
    } catch (error) {
      return false;
    }
  }
}

module.exports = new NgrokService();
